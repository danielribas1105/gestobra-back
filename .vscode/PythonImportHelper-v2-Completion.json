[
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.modules.users.model",
        "description": "app.modules.users.model",
        "peekOfCode": "class User(SQLModel, table=True):\n    __tablename__ = \"users\"\n    id: uuid.UUID = Field(\n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    name: str = Field()\n    email: str = Field(sa_column_kwargs={\"unique\": True, \"index\": True})\n    cpf: str | None = Field(default=None)",
        "detail": "app.modules.users.model",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "def create(work: UserCreate, db: Session=Depends(get_db)):\n    return create_user(db, work)\n@router.get(\"/\", response_model=list[UserOut])\ndef list_all(db: Session=Depends(get_db)):\n    return list_users(db)",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "list_all",
        "kind": 2,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "def list_all(db: Session=Depends(get_db)):\n    return list_users(db)",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "router = APIRouter(prefix=\"/user\", tags=[\"users\"])\n@router.post(\"/\", response_model=UserOut)\ndef create(work: UserCreate, db: Session=Depends(get_db)):\n    return create_user(db, work)\n@router.get(\"/\", response_model=list[UserOut])\ndef list_all(db: Session=Depends(get_db)):\n    return list_users(db)",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserBase(BaseModel):\n    name: str\n    email: str\n    cpf: str | None = None\n    phone: str | None = None\n    profile: str | None = None\n    active: bool\n    image_url: str | None = None\n    password_hash: str\nclass UserCreate(UserBase):",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\nclass UserOut(UserBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserOut(UserBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.modules.users.service",
        "description": "app.modules.users.service",
        "peekOfCode": "def create_user(db: Session, user: schema.UserCreate):\n    db_user = model.User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\ndef list_users(db: Session):\n    return db.query(model.User).all()",
        "detail": "app.modules.users.service",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.modules.users.service",
        "description": "app.modules.users.service",
        "peekOfCode": "def list_users(db: Session):\n    return db.query(model.User).all()",
        "detail": "app.modules.users.service",
        "documentation": {}
    },
    {
        "label": "Work",
        "kind": 6,
        "importPath": "app.modules.works.model",
        "description": "app.modules.works.model",
        "peekOfCode": "class Work(SQLModel, table=True):\n   __tablename__ = \"works\"\n   id: uuid.UUID = Field(\n      default_factory=uuid.uuid4,\n      primary_key=True,\n      sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n   )\n   name: str = Field(index=True)\n   description: str | None = Field(default=None)\n   address: str | None = Field(default=None)",
        "detail": "app.modules.works.model",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "def create(work: WorkCreate, db: Session=Depends(get_db)):\n    return create_work(db, work)\n@router.get(\"/\", response_model=list[WorkOut])\ndef list_all(db: Session=Depends(get_db)):\n    return list_works(db)",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "list_all",
        "kind": 2,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "def list_all(db: Session=Depends(get_db)):\n    return list_works(db)",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "router = APIRouter(prefix=\"/work\", tags=[\"works\"])\n@router.post(\"/\", response_model=WorkOut)\ndef create(work: WorkCreate, db: Session=Depends(get_db)):\n    return create_work(db, work)\n@router.get(\"/\", response_model=list[WorkOut])\ndef list_all(db: Session=Depends(get_db)):\n    return list_works(db)",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "WorkBase",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkBase(BaseModel):\n    name: str\n    description: str | None = None\n    address: str | None = None\n    region: str | None = None\n    city: str | None = None\n    state: str | None = None\n    budget: str | None = None\n    status: str | None = \"ativa\"\n    image_url: str | None = None",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "WorkCreate",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkCreate(WorkBase):\n    pass\nclass WorkOut(WorkBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "WorkOut",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkOut(WorkBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "create_work",
        "kind": 2,
        "importPath": "app.modules.works.service",
        "description": "app.modules.works.service",
        "peekOfCode": "def create_work(db: Session, work: schema.WorkCreate) -> model.Work:\n    new_work = model.Work(**work.dict())\n    db.add(new_work)\n    db.commit()\n    db.refresh(new_work)\n    return new_work\ndef list_works(db: Session):\n    return db.query(model.Work).all()",
        "detail": "app.modules.works.service",
        "documentation": {}
    },
    {
        "label": "list_works",
        "kind": 2,
        "importPath": "app.modules.works.service",
        "description": "app.modules.works.service",
        "peekOfCode": "def list_works(db: Session):\n    return db.query(model.Work).all()",
        "detail": "app.modules.works.service",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def create_user(db: Session, user: schemas.UserCreate):\n    db_user = models.User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\ndef list_users(db: Session):\n    return db.query(models.User).all()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def list_users(db: Session):\n    return db.query(models.User).all()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./db.sqlite3\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def home():\n   return {\"project\": \"GestObra\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(router)\n@app.get(\"/\")\ndef home():\n   return {\"project\": \"GestObra\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@router.post(\"/users\", response_model=schemas.UserOut)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    return crud.create_user(db, user)\n@router.get(\"/users\", response_model=list[schemas.UserOut])",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    return crud.create_user(db, user)\n@router.get(\"/users\", response_model=list[schemas.UserOut])\ndef list_users(db: Session = Depends(get_db)):\n    return crud.list_users(db)\n \"\"\"",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def list_users(db: Session = Depends(get_db)):\n    return crud.list_users(db)\n \"\"\"",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(work.router)\nrouter.include_router(user.router)\n\"\"\" router = APIRouter()\nrouter.include_router(work.router, tags=[\"work\"])\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    id: uuid.UUID\n    name: str\n    email: str\n    cpf: str\n    phone: str\n    profile: str\n    status: str\n    image_url: str\n    password_hash: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\nclass UserOut(UserBase):\n    id: str\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(UserBase):\n    id: str\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas",
        "documentation": {}
    }
]