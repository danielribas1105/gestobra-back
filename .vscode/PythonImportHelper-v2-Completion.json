[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "fastapi_async_sqlalchemy",
        "description": "fastapi_async_sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_async_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "fastapi_async_sqlalchemy",
        "description": "fastapi_async_sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_async_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UserSession",
        "importPath": "modules.auth.model",
        "description": "modules.auth.model",
        "isExtraImport": true,
        "detail": "modules.auth.model",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "importPath": "modules.auth.schema",
        "description": "modules.auth.schema",
        "isExtraImport": true,
        "detail": "modules.auth.schema",
        "documentation": {}
    },
    {
        "label": "get_user_by_email",
        "importPath": "modules.users.service",
        "description": "modules.users.service",
        "isExtraImport": true,
        "detail": "modules.users.service",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "importPath": "modules.users.service",
        "description": "modules.users.service",
        "isExtraImport": true,
        "detail": "modules.users.service",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Car",
        "importPath": "app.modules.cars.model",
        "description": "app.modules.cars.model",
        "isExtraImport": true,
        "detail": "app.modules.cars.model",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "app.modules.jobs.model",
        "description": "app.modules.jobs.model",
        "isExtraImport": true,
        "detail": "app.modules.jobs.model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.modules.users.model",
        "description": "app.modules.users.model",
        "isExtraImport": true,
        "detail": "app.modules.users.model",
        "documentation": {}
    },
    {
        "label": "Work",
        "importPath": "app.modules.works.model",
        "description": "app.modules.works.model",
        "isExtraImport": true,
        "detail": "app.modules.works.model",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "def get_session():\n    with Session(engine) as session:\n        yield session",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nengine = create_engine(DATABASE_URL, echo=True)\ndef get_session():\n    with Session(engine) as session:\n        yield session",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "engine = create_engine(DATABASE_URL, echo=True)\ndef get_session():\n    with Session(engine) as session:\n        yield session",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "UserSession",
        "kind": 6,
        "importPath": "app.modules.auth.model",
        "description": "app.modules.auth.model",
        "peekOfCode": "class UserSession(SQLModel, table=True):\n    __tablename__ = \"user_session\" # type: ignore\n    id: uuid.UUID = Field(  \n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    user_id: uuid.UUID | None = Field(default=None, foreign_key=\"user.id\")\n    expires_at: datetime = Field(\n        sa_column=Column(DateTime(timezone=True), nullable=False),",
        "detail": "app.modules.auth.model",
        "documentation": {}
    },
    {
        "label": "UserSession",
        "kind": 6,
        "importPath": "app.modules.auth.route",
        "description": "app.modules.auth.route",
        "peekOfCode": "class UserSession(SQLModel, table=True):\n    __tablename__ = \"user_session\" # type: ignore\n    id: uuid.UUID = Field(  \n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    user_id: uuid.UUID | None = Field(default=None, foreign_key=\"user.id\")\n    expires_at: datetime = Field(\n        sa_column=Column(DateTime(timezone=True), nullable=False),",
        "detail": "app.modules.auth.route",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.modules.auth.schema",
        "description": "app.modules.auth.schema",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\n    expire_at: int\n    refresh_token: str\nclass TokenData(BaseModel):\n    user_id: str | None = None\nclass RefreshTokenBody(BaseModel):\n    refresh_token: str",
        "detail": "app.modules.auth.schema",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.modules.auth.schema",
        "description": "app.modules.auth.schema",
        "peekOfCode": "class TokenData(BaseModel):\n    user_id: str | None = None\nclass RefreshTokenBody(BaseModel):\n    refresh_token: str",
        "detail": "app.modules.auth.schema",
        "documentation": {}
    },
    {
        "label": "RefreshTokenBody",
        "kind": 6,
        "importPath": "app.modules.auth.schema",
        "description": "app.modules.auth.schema",
        "peekOfCode": "class RefreshTokenBody(BaseModel):\n    refresh_token: str",
        "detail": "app.modules.auth.schema",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.modules.auth.service",
        "description": "app.modules.auth.service",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    # TODO: Add salt\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:",
        "detail": "app.modules.auth.service",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "app.modules.auth.service",
        "description": "app.modules.auth.service",
        "peekOfCode": "def get_password_hash(password):\n    # TODO: Add salt\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(\n            minutes=ACCESS_TOKEN_EXPIRE_MINUTES",
        "detail": "app.modules.auth.service",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.modules.auth.service",
        "description": "app.modules.auth.service",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(\n            minutes=ACCESS_TOKEN_EXPIRE_MINUTES\n        )\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.modules.auth.service",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.modules.auth.service",
        "description": "app.modules.auth.service",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/v1/auth/token\")\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    # TODO: Add salt\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:",
        "detail": "app.modules.auth.service",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.modules.auth.service",
        "description": "app.modules.auth.service",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    # TODO: Add salt\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta",
        "detail": "app.modules.auth.service",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "app.modules.cars.model",
        "description": "app.modules.cars.model",
        "peekOfCode": "class Car(SQLModel, table=True):\n    __tablename__ = \"cars\"\n    id: uuid.UUID = Field(\n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    model: str = Field()\n    license: str = Field(sa_column_kwargs={\"unique\": True, \"index\": True})\n    driver: str  # TODO - avaliar se será um user_id ",
        "detail": "app.modules.cars.model",
        "documentation": {}
    },
    {
        "label": "create_car",
        "kind": 2,
        "importPath": "app.modules.cars.route",
        "description": "app.modules.cars.route",
        "peekOfCode": "def create_car(car: Car, session: Session = Depends(get_session)):\n    session.add(car)\n    session.commit()\n    session.refresh(car)\n    return car\n@router.get(\"/\")\ndef list_cars(session: Session = Depends(get_session)):\n    cars = session.exec(select(Car)).all()\n    return cars",
        "detail": "app.modules.cars.route",
        "documentation": {}
    },
    {
        "label": "list_cars",
        "kind": 2,
        "importPath": "app.modules.cars.route",
        "description": "app.modules.cars.route",
        "peekOfCode": "def list_cars(session: Session = Depends(get_session)):\n    cars = session.exec(select(Car)).all()\n    return cars",
        "detail": "app.modules.cars.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.cars.route",
        "description": "app.modules.cars.route",
        "peekOfCode": "router = APIRouter(prefix=\"/car\", tags=[\"cars\"])\n@router.post(\"/\")\ndef create_car(car: Car, session: Session = Depends(get_session)):\n    session.add(car)\n    session.commit()\n    session.refresh(car)\n    return car\n@router.get(\"/\")\ndef list_cars(session: Session = Depends(get_session)):\n    cars = session.exec(select(Car)).all()",
        "detail": "app.modules.cars.route",
        "documentation": {}
    },
    {
        "label": "CarBase",
        "kind": 6,
        "importPath": "app.modules.cars.schema",
        "description": "app.modules.cars.schema",
        "peekOfCode": "class CarBase(BaseModel):\n    model: str\n    license: str\n    driver: str\n    manufacture: int | None = None\n    km: int | None = None\n    fuel: str | None = None\n    strength: str | None = None\n    capacity: str | None = None\n    versatility: str | None = None",
        "detail": "app.modules.cars.schema",
        "documentation": {}
    },
    {
        "label": "CarCreate",
        "kind": 6,
        "importPath": "app.modules.cars.schema",
        "description": "app.modules.cars.schema",
        "peekOfCode": "class CarCreate(CarBase):\n    pass\nclass CarOut(CarBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.cars.schema",
        "documentation": {}
    },
    {
        "label": "CarOut",
        "kind": 6,
        "importPath": "app.modules.cars.schema",
        "description": "app.modules.cars.schema",
        "peekOfCode": "class CarOut(CarBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.cars.schema",
        "documentation": {}
    },
    {
        "label": "create_car",
        "kind": 2,
        "importPath": "app.modules.cars.service",
        "description": "app.modules.cars.service",
        "peekOfCode": "def create_car(db: Session, car: schema.CarCreate):\n    db_car = model.Car(**car.dict())\n    db.add(db_car)\n    db.commit()\n    db.refresh(db_car)\n    return db_car\ndef list_cars(db: Session):\n    return db.query(model.Car).all()",
        "detail": "app.modules.cars.service",
        "documentation": {}
    },
    {
        "label": "list_cars",
        "kind": 2,
        "importPath": "app.modules.cars.service",
        "description": "app.modules.cars.service",
        "peekOfCode": "def list_cars(db: Session):\n    return db.query(model.Car).all()",
        "detail": "app.modules.cars.service",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "app.modules.jobs.model",
        "description": "app.modules.jobs.model",
        "peekOfCode": "class Job(SQLModel, table=True):\n    __tablename__ = \"jobs\"\n    id: uuid.UUID = Field(\n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    created_at: str = Field()\n    updated_at: str = Field()\n    origin: str = Field()",
        "detail": "app.modules.jobs.model",
        "documentation": {}
    },
    {
        "label": "create_job",
        "kind": 2,
        "importPath": "app.modules.jobs.route",
        "description": "app.modules.jobs.route",
        "peekOfCode": "def create_job(job: Job, session: Session = Depends(get_session)):\n    session.add(job)\n    session.commit()\n    session.refresh(job)\n    return job\n@router.get(\"/\")\ndef list_jobs(session: Session = Depends(get_session)):\n    jobs = session.exec(select(Job)).all()\n    return jobs",
        "detail": "app.modules.jobs.route",
        "documentation": {}
    },
    {
        "label": "list_jobs",
        "kind": 2,
        "importPath": "app.modules.jobs.route",
        "description": "app.modules.jobs.route",
        "peekOfCode": "def list_jobs(session: Session = Depends(get_session)):\n    jobs = session.exec(select(Job)).all()\n    return jobs",
        "detail": "app.modules.jobs.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.jobs.route",
        "description": "app.modules.jobs.route",
        "peekOfCode": "router = APIRouter(prefix=\"/job\", tags=[\"jobs\"])\n@router.post(\"/\")\ndef create_job(job: Job, session: Session = Depends(get_session)):\n    session.add(job)\n    session.commit()\n    session.refresh(job)\n    return job\n@router.get(\"/\")\ndef list_jobs(session: Session = Depends(get_session)):\n    jobs = session.exec(select(Job)).all()",
        "detail": "app.modules.jobs.route",
        "documentation": {}
    },
    {
        "label": "JobBase",
        "kind": 6,
        "importPath": "app.modules.jobs.schema",
        "description": "app.modules.jobs.schema",
        "peekOfCode": "class JobBase(BaseModel):\n    created_at: str\n    updated_at: str\n    origin: str\n    destiny: str\n    car_id: str\n    user_id: str\n    m3: int\n    status: str\nclass JobCreate(JobBase):",
        "detail": "app.modules.jobs.schema",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "kind": 6,
        "importPath": "app.modules.jobs.schema",
        "description": "app.modules.jobs.schema",
        "peekOfCode": "class JobCreate(JobBase):\n    pass\nclass JobOut(JobBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.jobs.schema",
        "documentation": {}
    },
    {
        "label": "JobOut",
        "kind": 6,
        "importPath": "app.modules.jobs.schema",
        "description": "app.modules.jobs.schema",
        "peekOfCode": "class JobOut(JobBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.jobs.schema",
        "documentation": {}
    },
    {
        "label": "create_job",
        "kind": 2,
        "importPath": "app.modules.jobs.service",
        "description": "app.modules.jobs.service",
        "peekOfCode": "def create_job(db: Session, job: schema.JobCreate):\n    db_job = model.Job(**job.dict())\n    db.add(db_job)\n    db.commit()\n    db.refresh(db_job)\n    return db_job\ndef list_jobs(db: Session):\n    return db.query(model.Job).all()",
        "detail": "app.modules.jobs.service",
        "documentation": {}
    },
    {
        "label": "list_jobs",
        "kind": 2,
        "importPath": "app.modules.jobs.service",
        "description": "app.modules.jobs.service",
        "peekOfCode": "def list_jobs(db: Session):\n    return db.query(model.Job).all()",
        "detail": "app.modules.jobs.service",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.modules.users.model",
        "description": "app.modules.users.model",
        "peekOfCode": "class User(SQLModel, table=True):\n    __tablename__ = \"users\"\n    id: uuid.UUID = Field(\n        default_factory=uuid.uuid4,\n        primary_key=True,\n        sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n    )\n    name: str = Field()\n    email: str = Field(sa_column_kwargs={\"unique\": True, \"index\": True})\n    cpf: str | None = Field(default=None)",
        "detail": "app.modules.users.model",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "def create_user(user: User, session: Session = Depends(get_session)):\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n@router.get(\"/\")\ndef list_users(session: Session = Depends(get_session)):\n    users = session.exec(select(User)).all()\n    return users",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "def list_users(session: Session = Depends(get_session)):\n    users = session.exec(select(User)).all()\n    return users",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.users.route",
        "description": "app.modules.users.route",
        "peekOfCode": "router = APIRouter(prefix=\"/user\", tags=[\"users\"])\n@router.post(\"/\")\ndef create_user(user: User, session: Session = Depends(get_session)):\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n@router.get(\"/\")\ndef list_users(session: Session = Depends(get_session)):\n    users = session.exec(select(User)).all()",
        "detail": "app.modules.users.route",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserBase(BaseModel):\n    name: str\n    email: str\n    cpf: str | None = None\n    phone: str | None = None\n    profile: str | None = None\n    active: bool\n    image_url: str | None = None\n    password_hash: str\nclass UserCreate(UserBase):",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\nclass UserOut(UserBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.modules.users.schema",
        "description": "app.modules.users.schema",
        "peekOfCode": "class UserOut(UserBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.users.schema",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.modules.users.service",
        "description": "app.modules.users.service",
        "peekOfCode": "def create_user(db: Session, user: schema.UserCreate):\n    db_user = model.User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\ndef list_users(db: Session):\n    return db.query(model.User).all()\nasync def get_user_by_id(id: uuid.UUID | str | None):\n    return await db.session.get(model.User, id)",
        "detail": "app.modules.users.service",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.modules.users.service",
        "description": "app.modules.users.service",
        "peekOfCode": "def list_users(db: Session):\n    return db.query(model.User).all()\nasync def get_user_by_id(id: uuid.UUID | str | None):\n    return await db.session.get(model.User, id)\nasync def get_user_by_email(email) -> model.User | None:\n    result = (await db.session.execute(select(model.User).where(model.User.email == email))).first()\n    return result[0] if result is not None else None",
        "detail": "app.modules.users.service",
        "documentation": {}
    },
    {
        "label": "Work",
        "kind": 6,
        "importPath": "app.modules.works.model",
        "description": "app.modules.works.model",
        "peekOfCode": "class Work(SQLModel, table=True):\n   __tablename__ = \"works\"\n   id: uuid.UUID = Field(\n      default_factory=uuid.uuid4,\n      primary_key=True,\n      sa_column_kwargs={\"server_default\": text(\"gen_random_uuid()\")},\n   )\n   name: str = Field(index=True)\n   description: str | None = Field(default=None)\n   address: str | None = Field(default=None)",
        "detail": "app.modules.works.model",
        "documentation": {}
    },
    {
        "label": "create_work",
        "kind": 2,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "def create_work(work: Work, session: Session = Depends(get_session)):\n    session.add(work)\n    session.commit()\n    session.refresh(work)\n    return work\n@router.get(\"/\")\ndef list_works(session: Session = Depends(get_session)):\n    works = session.exec(select(Work)).all()\n    return works",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "list_works",
        "kind": 2,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "def list_works(session: Session = Depends(get_session)):\n    works = session.exec(select(Work)).all()\n    return works",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.modules.works.route",
        "description": "app.modules.works.route",
        "peekOfCode": "router = APIRouter(prefix=\"/work\", tags=[\"works\"])\n@router.post(\"/\")\ndef create_work(work: Work, session: Session = Depends(get_session)):\n    session.add(work)\n    session.commit()\n    session.refresh(work)\n    return work\n@router.get(\"/\")\ndef list_works(session: Session = Depends(get_session)):\n    works = session.exec(select(Work)).all()",
        "detail": "app.modules.works.route",
        "documentation": {}
    },
    {
        "label": "WorkBase",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkBase(BaseModel):\n    name: str\n    description: str | None = None\n    address: str | None = None\n    region: str | None = None\n    city: str | None = None\n    state: str | None = None\n    budget: str | None = None\n    status: str | None = \"ativa\"\n    image_url: str | None = None",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "WorkCreate",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkCreate(WorkBase):\n    pass\nclass WorkOut(WorkBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "WorkOut",
        "kind": 6,
        "importPath": "app.modules.works.schema",
        "description": "app.modules.works.schema",
        "peekOfCode": "class WorkOut(WorkBase):\n    id: uuid.UUID\n    class Config:\n        from_attributes = True",
        "detail": "app.modules.works.schema",
        "documentation": {}
    },
    {
        "label": "create_work",
        "kind": 2,
        "importPath": "app.modules.works.service",
        "description": "app.modules.works.service",
        "peekOfCode": "def create_work(db: Session, work: schema.WorkCreate) -> model.Work:\n    new_work = model.Work(**work.dict())\n    db.add(new_work)\n    db.commit()\n    db.refresh(new_work)\n    return new_work\ndef list_works(db: Session):\n    return db.query(model.Work).all()",
        "detail": "app.modules.works.service",
        "documentation": {}
    },
    {
        "label": "list_works",
        "kind": 2,
        "importPath": "app.modules.works.service",
        "description": "app.modules.works.service",
        "peekOfCode": "def list_works(db: Session):\n    return db.query(model.Work).all()",
        "detail": "app.modules.works.service",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def create_user(db: Session, user: schemas.UserCreate):\n    db_user = models.User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\ndef list_users(db: Session):\n    return db.query(models.User).all()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def list_users(db: Session):\n    return db.query(models.User).all()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "on_startup",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def on_startup():\n    SQLModel.metadata.create_all(engine)\n@app.get(\"/\")\ndef home():\n   return {\"project\": \"GestObra\"}\n@app.get(\"/status\")\ndef get_status():\n    return {\n        \"status\": \"online\",\n        \"timestamp\": datetime.datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def home():\n   return {\"project\": \"GestObra\"}\n@app.get(\"/status\")\ndef get_status():\n    return {\n        \"status\": \"online\",\n        \"timestamp\": datetime.datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n    }",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_status",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_status():\n    return {\n        \"status\": \"online\",\n        \"timestamp\": datetime.datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n    }",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(router)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # ou [\"*\"] durante dev\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n@app.on_event(\"startup\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@router.post(\"/users\", response_model=schemas.UserOut)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    return crud.create_user(db, user)\n@router.get(\"/users\", response_model=list[schemas.UserOut])",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    return crud.create_user(db, user)\n@router.get(\"/users\", response_model=list[schemas.UserOut])\ndef list_users(db: Session = Depends(get_db)):\n    return crud.list_users(db)\n \"\"\"",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def list_users(db: Session = Depends(get_db)):\n    return crud.list_users(db)\n \"\"\"",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(work.router)\nrouter.include_router(user.router)\nrouter.include_router(car.router)\nrouter.include_router(job.router)\n\"\"\" router = APIRouter()\nrouter.include_router(work.router, tags=[\"work\"])\ndef get_db():\n    db = SessionLocal()\n    try:",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    id: uuid.UUID\n    name: str\n    email: str\n    cpf: str\n    phone: str\n    profile: str\n    status: str\n    image_url: str\n    password_hash: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\nclass UserOut(UserBase):\n    id: str\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(UserBase):\n    id: str\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas",
        "documentation": {}
    }
]